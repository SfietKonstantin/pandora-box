--- original/opt/lipstick-pandora/qml/Launcher.qml	2014-04-02 13:14:43.671356007 +0200
+++ patched/opt/lipstick-pandora/qml/Launcher.qml	2014-04-04 14:43:25.786030732 +0200
@@ -17,7 +17,8 @@
     property Item reorderItem
     property int columns: 4
     property int initialCellWidth: (desktop.width - Theme.paddingLarge * 2) / columns
-    property real firstRowOpacity: Math.min(Math.max((dashboard.contentY - dashboard.lockscreenAndStatusAreaHeight)/cellHeight, 0.0), 1.0)
+    property real firstRowOpacity: Math.min(Math.max((dashboard.contentY - dashboard.lockscreenAndStatusAreaHeight - switcher.singlePageHeight * (switcher.pageCount - 1))/cellHeight, 0.0), 1.0)
+    
     property bool removeApplicationMode
     property Item remorse
     property var launchingItems: []
--- original/opt/lipstick-pandora/qml/main.qml	2014-04-02 13:14:43.684356100 +0200
+++ patched/opt/lipstick-pandora/qml/main.qml	2014-04-04 14:57:44.855545883 +0200
@@ -38,7 +38,7 @@
         property bool peeking: !Lipstick.compositor.homeActive &&
                                !LipstickSettings.lockscreenVisible
         property bool isInPeekingPosition: dashboard.contentY == dashboard.peekingPosition && !yBehavior.running
-        property bool isInSwitcherPosition: dashboard.contentY == dashboard.lockscreenAndStatusAreaHeight
+        property bool isInSwitcherPosition: dashboard.contentY >= dashboard.lockscreenAndStatusAreaHeight && dashboard.contentY <= dashboard.lockscreenAndStatusAreaHeight + (switcher.pageCount - 1) * switcher.singlePageHeight
         property bool inLauncher: dashboard.currentIndex > 1
         property bool screenIsLocked: LipstickSettings.lockscreenVisible
         property bool deviceIsLocked: deviceLock.state == 1
@@ -540,15 +540,15 @@
             id: switcherAnchor
             width: dashboard.width
             height: dashboard.height
-            visible: dashboard.contentY > 0 && dashboard.contentY < lockAndStatusDelegate.height + switcherAnchor.height
-
+            // visible: dashboard.contentY > 0 && dashboard.contentY < lockAndStatusDelegate.height + switcherAnchor.height
+            
             DeviceLock {
                 id: deviceLockUI
                 width: dashboard.width
                 height: dashboard.height
                 opacity: deviceLock.state == 1 ? 1 : 0
                 enabled: deviceLock.state == 1
-
+                        
                 Behavior on opacity { FadeAnimation {} }
 
                 Binding {
@@ -560,11 +560,36 @@
 
             Switcher {
                 id: switcher
+                property int pageCount: 1
+                property int _addedPages: 0
                 width: dashboard.width
                 opacity: deviceLock.state == 1 ? 0 : 1
                 enabled: deviceLock.state != 1
-
+                
                 Behavior on opacity { FadeAnimation {} }
+                
+                onHeightChanged: manageSwitcherPages()
+                
+                function manageSwitcherPages() {
+                    if (dashboard.height > 0) {
+                        // Create dummy pages to allow paging
+                        switcher.pageCount = Math.ceil(switcher.height / dashboard.height)
+                        while (switcher._addedPages < switcher.pageCount - 1) {
+                            var dummy = dummyDelegate.createObject(dashboard.contentItem)
+                            dashboard.model.insert(2, { comp: dummy })
+                            switcher._addedPages ++
+                        }
+                        while (switcher._addedPages > switcher.pageCount - 1) {
+                            dashboard.model.remove(2)
+                            switcher._addedPages --
+                        }
+                        
+                        for (var i = 1; i < 1 + switcher._addedPages; i++) {
+                            dashboard.model.get(i).comp.height = switcher.singlePageHeight
+                        }
+                        dashboard.model.get(1 + switcher._addedPages).comp.height = dashboard.height
+                    }
+                }
             }
         }
 
@@ -587,7 +612,7 @@
 
             MouseArea {
                 width: parent.width
-                height: (dashboard.model.count - 2) * dashboard.height + launcher.cellHeight
+                height: (dashboard.model.count - 1 - switcher.pageCount) * dashboard.height + launcher.cellHeight
 
                 Launcher {
                     id: launcher
@@ -595,14 +620,14 @@
                     onHeightChanged: manageDummyPages()
 
                     function manageDummyPages() {
-                        if (dashboard.model.count > 2 && dashboard.height > 0 && height > cellHeight) {
+                        if (dashboard.model.count > 1 + switcher.pageCount && dashboard.height > 0 && height > cellHeight) {
                             // Create dummy pages to allow paging
                             var pageCount = Math.ceil((height - cellHeight)/dashboard.height)
-                            while (dashboard.model.count-2 < pageCount) {
+                            while (dashboard.model.count - 1 - switcher.pageCount < pageCount) {
                                 var dummy = dummyDelegate.createObject(dashboard.contentItem)
                                 dashboard.model.append({ comp: dummy })
                             }
-                            while (dashboard.model.count-2 > pageCount) {
+                            while (dashboard.model.count - 1 - switcher.pageCount > pageCount) {
                                 var obj = dashboard.model.get(dashboard.model.count-1)
                                 dashboard.model.remove(dashboard.model.count-1)
                             }
--- original/opt/lipstick-pandora/qml/Switcher.qml	2014-04-02 13:14:43.718356343 +0200
+++ patched/opt/lipstick-pandora/qml/Switcher.qml	2014-04-04 14:43:25.788030744 +0200
@@ -19,8 +19,9 @@
     property int showingPid
     property bool skipOnReleased: false
     property bool appShowInProgress: showingPid > 0 || appShowTimer.running || pendingWindows.count > 0
+    property int singlePageHeight: switcherRoot.columns * (Theme.paddingLarge + switcherRoot.windowHeight)
 
-    height: desktop.closeApplicationEnabled ? Math.max(housekeeping.height, switcherRoot.height + 2 * Theme.paddingLarge) : desktop.height
+    height: desktop.closeApplicationEnabled ? Math.max(housekeeping.height, switcherRoot.height + 2 * Theme.paddingLarge) : desktop.height * Math.max(Math.ceil(mruSwitcherModel.count / 9), 1)
 
     function playEffect() {
         ngfEvent.play()
@@ -213,7 +214,7 @@
                 id: switcherDelegate
                 width: switcherRoot.windowWidth
                 height: switcherRoot.windowHeight
-                visible: desktop.closeApplicationEnabled || model.index < 9
+                // visible: desktop.closeApplicationEnabled
                 onWindowMapPendingChanged: {
                     if (windowMapPending) mruSwitcherModel.touch(index)
                 }
@@ -241,7 +242,7 @@
             onCloseApplicationEnabledChanged: switcherRoot.updateColumns()
         }
     }
-
+    
     // We use a separate inner item here instead of reparenting to switcherWrapper
     // to allow the column change animation to modify its opacity without interfering
     // with any opacity applied to switcherWrapper.
